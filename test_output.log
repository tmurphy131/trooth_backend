============================= test session starts ==============================
platform darwin -- Python 3.13.3, pytest-8.4.1, pluggy-1.6.0
rootdir: /Users/tmoney/Documents/ONLY BLV/trooth_backend
plugins: anyio-4.9.0, asyncio-1.0.0
asyncio: mode=Mode.STRICT, asyncio_default_fixture_loop_scope=None, asyncio_default_test_loop_scope=function
collected 13 items

tests/test_admin_template.py ..                                          [ 15%]
tests/test_admin_template_clone.py F                                     [ 23%]
tests/test_apprentices.py .                                              [ 30%]
tests/test_assessment_draft_questions.py F                               [ 38%]
tests/test_auth.py .                                                     [ 46%]
tests/test_drafts.py .                                                   [ 53%]
tests/test_invitations.py .                                              [ 61%]
tests/test_mentor_routes.py .                                            [ 69%]
tests/test_permissions.py .                                              [ 76%]
tests/test_scoring.py .                                                  [ 84%]
tests/test_submissions.py .                                              [ 92%]
tests/test_users.py .                                                    [100%]

=================================== FAILURES ===================================
________________________ test_clone_assessment_template ________________________

test_db = <sqlalchemy.orm.session.Session object at 0x11a953380>
mock_admin = None

    @pytest.mark.asyncio
    async def test_clone_assessment_template(test_db, mock_admin):
        # Create an admin user and a category
        admin_id = str(uuid.uuid4())
        category_id = str(uuid.uuid4())
        template_id = str(uuid.uuid4())
    
        admin = User(id=admin_id, name="Admin", email=f"admin+{uuid4().hex[:8]}@example.com", role="admin")
        category = Category(id=category_id, name=f"Fellowship {uuid.uuid4().hex[:6]}")
        template = AssessmentTemplate(id=template_id, name="Original Template")
        template.category = category
    
        test_db.add_all([admin, category, template])
        test_db.commit()
    
        token = f"Bearer {admin_id}"
    
    
        response = client.post(
            f"/admin/assessment-templates/{template_id}/clone",
            headers={"Authorization": token}
        )
    
>       assert response.status_code == 200
E       assert 404 == 200
E        +  where 404 = <Response [404 Not Found]>.status_code

tests/test_admin_template_clone.py:34: AssertionError
----------------------------- Captured stderr call -----------------------------
2025-06-22 01:44:25,576 [INFO] httpx: HTTP Request: POST http://testserver/admin/assessment-templates/564e1dfe-decd-4f29-93a0-a59a252c1679/clone "HTTP/1.1 404 Not Found"
------------------------------ Captured log call -------------------------------
INFO     httpx:_client.py:1025 HTTP Request: POST http://testserver/admin/assessment-templates/564e1dfe-decd-4f29-93a0-a59a252c1679/clone "HTTP/1.1 404 Not Found"
_________________ test_create_assessment_draft_with_questions __________________

test_db = <sqlalchemy.orm.session.Session object at 0x11aa156d0>
mock_apprentice = None

    @pytest.mark.asyncio
    async def test_create_assessment_draft_with_questions(test_db: Session, mock_apprentice):
        mentor_id = str(uuid.uuid4())
        apprentice_id = str(uuid.uuid4())
    
        mentor = User(
            id=mentor_id,
            name="Mentor",
            email=f"mentor+{uuid4().hex[:6]}@example.com",
            role="mentor"
        )
        apprentice = User(
            id=apprentice_id,
            name="Apprentice",
            email=f"apprentice+{uuid4().hex[:6]}@example.com",
            role="apprentice"
        )
        category = Category(id=str(uuid.uuid4()), name=f"Spiritual Growth {uuid.uuid4().hex[:5]}")
        question1 = Question(id=str(uuid.uuid4()), text="What is faith?", category_id=category.id)
        question2 = Question(id=str(uuid.uuid4()), text="How often do you pray?", category_id=category.id)
        template = AssessmentTemplate(id=str(uuid.uuid4()), name="Test Template")
        template.category = category
    
        test_db.add_all([mentor, apprentice, category, question1, question2, template])
        test_db.commit()
    
        token = f"Bearer {apprentice_id}"
    
    
        response = client.post(
            "/assessment-drafts",
            headers={"Authorization": token},
            json={"template_id": template.id}
        )
    
>       assert response.status_code == 200
E       assert 404 == 200
E        +  where 404 = <Response [404 Not Found]>.status_code

tests/test_assessment_draft_questions.py:47: AssertionError
----------------------------- Captured stderr call -----------------------------
2025-06-22 01:44:25,628 [INFO] httpx: HTTP Request: POST http://testserver/assessment-drafts "HTTP/1.1 404 Not Found"
------------------------------ Captured log call -------------------------------
INFO     httpx:_client.py:1025 HTTP Request: POST http://testserver/assessment-drafts "HTTP/1.1 404 Not Found"
=============================== warnings summary ===============================
app/schemas/user.py:9
  /Users/tmoney/Documents/ONLY BLV/trooth_backend/app/schemas/user.py:9: PydanticDeprecatedSince20: Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/
    @validator("role")

../../../../../Library/Frameworks/Python.framework/Versions/3.13/lib/python3.13/site-packages/pydantic/_internal/_config.py:323
../../../../../Library/Frameworks/Python.framework/Versions/3.13/lib/python3.13/site-packages/pydantic/_internal/_config.py:323
../../../../../Library/Frameworks/Python.framework/Versions/3.13/lib/python3.13/site-packages/pydantic/_internal/_config.py:323
../../../../../Library/Frameworks/Python.framework/Versions/3.13/lib/python3.13/site-packages/pydantic/_internal/_config.py:323
../../../../../Library/Frameworks/Python.framework/Versions/3.13/lib/python3.13/site-packages/pydantic/_internal/_config.py:323
../../../../../Library/Frameworks/Python.framework/Versions/3.13/lib/python3.13/site-packages/pydantic/_internal/_config.py:323
../../../../../Library/Frameworks/Python.framework/Versions/3.13/lib/python3.13/site-packages/pydantic/_internal/_config.py:323
../../../../../Library/Frameworks/Python.framework/Versions/3.13/lib/python3.13/site-packages/pydantic/_internal/_config.py:323
../../../../../Library/Frameworks/Python.framework/Versions/3.13/lib/python3.13/site-packages/pydantic/_internal/_config.py:323
  /Library/Frameworks/Python.framework/Versions/3.13/lib/python3.13/site-packages/pydantic/_internal/_config.py:323: PydanticDeprecatedSince20: Support for class-based `config` is deprecated, use ConfigDict instead. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/
    warnings.warn(DEPRECATION_MESSAGE, DeprecationWarning)

app/db.py:9
  /Users/tmoney/Documents/ONLY BLV/trooth_backend/app/db.py:9: MovedIn20Warning: The ``declarative_base()`` function is now available as sqlalchemy.orm.declarative_base(). (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)
    Base = declarative_base()

tests/test_admin_template_clone.py::test_clone_assessment_template
tests/test_admin_template_clone.py::test_clone_assessment_template
tests/test_assessment_draft_questions.py::test_create_assessment_draft_with_questions
tests/test_assessment_draft_questions.py::test_create_assessment_draft_with_questions
tests/test_assessment_draft_questions.py::test_create_assessment_draft_with_questions
  /Library/Frameworks/Python.framework/Versions/3.13/lib/python3.13/site-packages/sqlalchemy/sql/schema.py:3624: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).
    return util.wrap_callable(lambda ctx: fn(), fn)  # type: ignore

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ============================
FAILED tests/test_admin_template_clone.py::test_clone_assessment_template - a...
FAILED tests/test_assessment_draft_questions.py::test_create_assessment_draft_with_questions
================== 2 failed, 11 passed, 16 warnings in 0.25s ===================
